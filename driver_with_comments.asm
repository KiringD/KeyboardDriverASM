Assume CS: Code, DS: Code  ;Задаются сегменты кода (CS) и данных (DS).
Code Segment
    org 100h               ;Устанавливается начальный адрес программы на 100h.
    

key_count db 0             ;Переменная которая будет хранить количество нажатых клавиш

frequency equ 3000         ;Частота издаваемого звука
number_cycles equ 1        ;Количество циклов воспроизведения звука данной частоты
key_press_period equ 7     ;Количество клавиш необходимых для проигрывания звука

port_b equ 61h             ;Символическое имя для порта ввода-вывода
    .286                   ;Указание о наличии инструкций 286 процессора для обеспечения совместимости

Start proc near            ;Начало процедуры Start
    mov ax,cs                 
    mov ds,ax              ;Загрузка сегмента данных в регистр AX. Это позволяет программе использовать инструкции сегмента для доступа к данным и коду.

main_loop: call kbin       ;Объявление метки main_loop и вызов процедуры kbin для считывания символа с клавиатуры и сохранения его в регистр AL
    cmp al,'q'             ;Сравнение регистра AL со значением 'q'
    jz exit                ;В случае когда значение AL равно 'q' (нажатая клавиша является клавишей 'q') перейти к метке exit для завершения программы
  
    inc key_count          ;Увеличение счетчика нажатий на 1
    cmp key_count, key_press_period ;Сравнения количества нажатых клавиш с необходимым количеством нажатий
    jnz main_loop          ;В случае если количество нажатий не равно требуемому количеству нажатий, продолжить цикл
    call ton1              ;В случае если количество нажатий равно требуемому количеству нажатий вызвать ton1 для воспроизведения звука 
    call delay             ;Задержка между щелчками
    call ton1              ;Повторное воспроизведение щелчка
    mov key_count, 0       ;Обнуление счетчика нажатий после воспроизведения звука
    jmp main_loop          ;Продолжение цикла
exit:                      ;Объявление метки exit, используемой для завершения программы
    mov ah,4ch             ;Помещение значение 4Ch в регистр AH (код завершения)
    int 21h                ;Вызов прерывания 21h для завершения программы

start endp
ton1 proc near
    mov dx, number_cycles  
    mov di, frequency      ;Загрузка значений number_cycles и freuency в регистры, для последующей работы с ними
ton0 proc near             ;Начало процедуры ton0
    cli                    ;Запрет прерываний с помощью инструкции cli
    in al, port_b
    and al,11111110b       ;Считывается значение порта ввода-вывода и сбрасывается младший бит (бит 0) регистра AL. Это делается для предотвращения записи в порт ввода-вывода до установки нужного значения бита 1
ton01: or al,00000010b     ;Устанавливает бит 1 регистра AL
    out port_b, al         ;Записывается значение обратно в порт ввода-вывода
    mov cx,di              ;Устанавливается значение счетчика циклов в регистре CX равным значению frequency
    loop $                 ;Выполняется цикл до тех пор, пока счетчик циклов не станет равным нулю
    and al,11111101b       ;Сбрасывается бит 1 регистра AL
    out port_b, al         ;Записывается значение обратно в порт ввода-вывода
    mov cx,di              ;Устанавливается значение счетчика циклов в регистре CX равным значению frequency
    loop $                 ;Выполняется цикл до тех пор, пока счетчик циклов не станет равным нулю
    dec dx                 ;Уменьшается значение регистра DX на единицу
    jnz ton01              ;Если значение регистра DX не равно нулю, происходит переход на метку ton01
    sti                    ;Включаются прерывания с помощью инструкции sti
    ret                    ;Возвращение из процедуры ton0
ton0 endp                  
ton1 endp                  ;Конец процедур ton0 и ton1

delay proc                 ;Начало процедуры delay
  push cx
  push dx                  ;Сохранение значений регистров CX и DX в стек

  mov cx, 100              ;Устанавливается значение регистра CX равным 100. Данный регистр будет использоваться для установки времени задержки
delay1:
  mov dx, 934h             ;Загружает значение 934h в регистр DX
delay2:
  dec dx                   ;уменьшает значение регистра DX на единицу
  jnz delay2               
  loop delay1              ;Если DX не равен нулю, происходит переход на метку delay2.

  pop dx                   
  pop cx                   ;Значения регистров CX и DX восстанавливаются со стека
  ret                      ;Возвращение из процедуры delay
delay endp

kbin proc near             ;Начало процедуры kbin
    mov ah,1               ;Загружается значение 1 в регистр AH, указывая на функцию чтения символа с клавиатуры
    int 21h                ;Выполняется прерывание 21h для чтения символа с клавиатуры
    ret                    ;Возвращение из процедуры kbin
kbin endp
code ends                  ;Конец сегмента кода
    END Start              ;Завершение программы с меткой Start.
